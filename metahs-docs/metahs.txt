-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on bitbucket at
--   <a>https://bitbucket.org/SaKa1979/metahs/src/master/README</a>
@package metahs
@version 0.0.1


-- | MetaHS metamodel
module MetaHS.DataModel.MetaModel

-- | The various elements that can be used in the metamodel.
data Element

-- | Top level program
Program :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a module
Module :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a module head
ModuleHead :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a module import
ModuleImport :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a module export
ModuleExport :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a function
Function :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a datatype declaration.
DataType :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a type synonym.
TypeSynonym :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a type signature.
TypeSignature :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a type instance.
TypeClass :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String
Instance :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents an inline Pragma.
Pragma :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a type which is unknown.
UnknownType :: !String -> Element

-- | The name of the program.
[name] :: Element -> !String

-- | Represents a source code location.
Location :: !String -> !Int -> !Int -> !Int -> !Int -> Element

-- | The path to the file containing the source code.
[locationPath] :: Element -> !String

-- | The start line.
[locationStartLine] :: Element -> !Int

-- | The start column.
[locationStartColumn] :: Element -> !Int

-- | The end line.
[locationEndLine] :: Element -> !Int

-- | The end column.
[locationEndColumn] :: Element -> !Int

-- | Contains a generic String value.
StringValue :: !String -> Element

-- | The String value.
[stringValue] :: Element -> !String

-- | Contains a generic Int value.
IntValue :: !Int -> Element

-- | The Int value.
[intValue] :: Element -> !Int

-- | A Pair is defined as a tuple of Elements
type Pair = (Element, Element)

-- | A relation is defined as a set of Pair types. E.g., _contains,
--   _source, _uses, LCOM
type Relation = Set (Element, Element)

-- | The MetaModel type.
newtype MetaModel
MetaModel :: MetaModelImpl -> MetaModel
[getMetaModelImpl] :: MetaModel -> MetaModelImpl
pPrint :: Pretty a => a -> Doc
instance GHC.Show.Show MetaHS.DataModel.MetaModel.MetaModel
instance GHC.Read.Read MetaHS.DataModel.MetaModel.MetaModel
instance GHC.Classes.Ord MetaHS.DataModel.MetaModel.Element
instance GHC.Classes.Eq MetaHS.DataModel.MetaModel.Element
instance GHC.Read.Read MetaHS.DataModel.MetaModel.Element
instance GHC.Show.Show MetaHS.DataModel.MetaModel.Element
instance Text.PrettyPrint.HughesPJClass.Pretty MetaHS.DataModel.MetaModel.MetaModel
instance Text.PrettyPrint.HughesPJClass.Pretty MetaHS.DataModel.MetaModel.Element


-- | Utility functions for files and directories.
module MetaHS.DataModel.Utils.File.FileUtils

-- | Flattens the hierarchy of a directory to a list of files.
filesInHierarchy :: FilePath -> IO [FilePath]

-- | Attempts to extract modules for each file in the directory hierarchy
--   The returned tuple contains the successfully extracted modules and the
--   ParseResult information for those files where this extraction failed.
modulesInHierarchy :: FilePath -> IO ([Module SrcSpanInfo], [ParseResult (Module SrcSpanInfo)])


-- | Utility functions for SrcLoc and related objects.
module MetaHS.DataModel.Utils.Language.Haskell.Exts.SrcLoc

-- | Creates a Location Element containing the information of the SrcLoc
--   object.
srcLocToLocationElement :: SrcLoc -> Element

-- | Creates a Location Element containing the information of the SrcSpan
--   object.
srcSpanToLocationElement :: SrcSpan -> Element

-- | Creates a Location Element containing the information of the
--   SrcSpanInfo object.
srcSpanInfoToLocationElement :: SrcSpanInfo -> Element


-- | Utility functions for Modules objects.
module MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.Module

-- | Returns the location information of a Module.
srcSpanInfo :: Module SrcSpanInfo -> SrcSpanInfo

-- | Returns the ModuleHead of a Module.
head :: Module l -> Maybe (ModuleHead l)

-- | Returns the name of the module contained in the ModuleHead.
headName :: ModuleHead l -> String

-- | Returns the WarningText contained in the ModuleHead
headWarningText :: ModuleHead l -> Maybe (WarningText l)

-- | Return the ExportSpecList contained in the ModuleHead.
headExports :: ModuleHead l -> Maybe (ExportSpecList l)

-- | Returns the name of a Module.
name :: Module l -> Maybe String

-- | Returns the WarningText of a Module.
warningText :: Module l -> Maybe (WarningText l)

-- | Returns the ExportSpecList of a Module.
exports :: Module l -> Maybe (ExportSpecList l)

-- | Returns the ExportSpecList as list
getModuleExports :: Module l -> [ExportSpec l]

-- | Returns the pragmas of a module.
pragmas :: Module l -> [ModulePragma l]

-- | Returns the imports of a module
imports :: Module l -> [ImportDecl l]

-- | Returns the Decl of a module
declarations :: Module l -> [Decl l]


-- | MetaHS extractor for application level contains relations
module MetaHS.DataModel.Extractor.Program.Contains

-- | Creates MetaModel.Relation set for the modules contained within the
--   program.
contains :: String -> [Module SrcSpanInfo] -> Relation


-- | Utility functions for Name objects.
module MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.Name

-- | Returns the name for a Name object.
name :: Name l -> String


-- | Utility functions for DeclHead objects.
module MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.DeclHead

-- | Returns the name for a DeclHead object.
name :: DeclHead l -> String


-- | Utility functions for ConDecl objects.
module MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.ConDecl

-- | Returns the name for a ConDecl object.
name :: ConDecl l -> String


-- | Utility functions for QName objects.
module MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.QName

-- | Returns the name for a QName object.
name :: QName l -> Maybe String


-- | Utility functions for Decl objects.
module MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.Decl

-- | Returns the SrcSpanInfo object associated with the Decl object.
srcSpanInfo :: Decl SrcSpanInfo -> SrcSpanInfo

-- | Represents the (simplified) information for a data constructor.
data DataConstructor
DataConstructor :: String -> [ValueConstructor] -> DataConstructor

-- | The name of the data constructor.
[dataConstructorName] :: DataConstructor -> String

-- | The value constructors for this data constructor.
[valueConstructors] :: DataConstructor -> [ValueConstructor]

-- | Represents the information for a value constructor.
data ValueConstructor
ValueConstructor :: String -> [Type SrcSpanInfo] -> [Field] -> ValueConstructor

-- | The name of the value constructor.
[valueConstructorName] :: ValueConstructor -> String

-- | Contains the types used by this value constructor if this is not
--   defined using record notation. For GADT data type declarations, this
--   field will contain the final type irrespective of whether record
--   notation is used for the preceeding types.
[valueConstructorTypes] :: ValueConstructor -> [Type SrcSpanInfo]

-- | In case the value constructor is defined using record notation, this
--   field will contain the fields used by this value constructor.
[valueConstructorFields] :: ValueConstructor -> [Field]

-- | Represents a record field of a value constructor.
data Field
Field :: [String] -> Type SrcSpanInfo -> Field

-- | The name(s) for this field.
[fieldNames] :: Field -> [String]

-- | The types used by this field.
[fieldTypes] :: Field -> Type SrcSpanInfo

-- | Converts a Decl to a DataConstructor object if possible (DataDecl or
--   GDataDecl).
dataConstructor :: Decl SrcSpanInfo -> Maybe DataConstructor

-- | Returns the name of the PatBind if possible.
patternName :: Decl SrcSpanInfo -> Maybe String

-- | Returns the name of the FunBind if possible.
functionName :: Decl SrcSpanInfo -> Maybe String

-- | Returns the name of the TypeSig if possible.
typeSigName :: Decl SrcSpanInfo -> Maybe String

-- | Returns the name of the typeClass if possible.
typeClassName :: Decl SrcSpanInfo -> Maybe String

-- | Returns the name of the Instance (as "<a>type-class</a>
--   <a>data-type</a>") if possible.
instanceName :: Decl SrcSpanInfo -> Maybe String

-- | Returns the name of the InlineSig if possible.
inlineSigName :: Decl SrcSpanInfo -> Maybe String
instance GHC.Show.Show MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.Decl.DataConstructor
instance GHC.Show.Show MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.Decl.ValueConstructor
instance GHC.Show.Show MetaHS.DataModel.Utils.Language.Haskell.Exts.Syntax.Decl.Field


-- | Generic SYB functions for finding certain nodes
module MetaHS.DataModel.Utils.Find

-- | SYB function that searches for TyCon nodes and returns their names.
findTyConNames :: Data a => a -> [String]

-- | SYB function that searches for QName nodes (without TyCons) and
--   returns their names.
findQNames :: Data a => a -> [String]

-- | SYB function that searches for Pat nodes that represent variables and
--   returns their names.
findPatVars :: Data a => a -> [String]

-- | SYB function that searches for functions and returns their names.
findFunctionNames :: Data a => a -> [String]


-- | Name utility functions for the MetaHS data model layer.
module MetaHS.DataModel.Utils.Name

-- | Qualify identifier
makeQualifiedId :: String -> String -> String

-- | Splits an identifier in the qualifier and name parts.
split :: String -> (String, String)

-- | Determines whether a given qualified name is local to the given
--   qualifier.
isLocal :: String -> String -> Bool


-- | MetaHS extractor for module level import relations. Currently only
--   (Module,Module) relations are created from ImportDecl-importModule.
module MetaHS.DataModel.Extractor.Module.Imports

-- | Creates Location relations for all supported top-level declarations in
--   the | provided Module.
imports :: Module SrcSpanInfo -> Relation


-- | NameResolution functions
module MetaHS.DataModel.Utils.NameResolution

-- | A NameResolutionMap is a Data.Map that map from plain identifiers to
--   resolved MetaModel.Element (e.g. "sum" -&gt; Function "M.N.sum").
type NameResolutionMap = Map String Element

-- | The NameResolutionMaps. The first Data.Map is applicable to types; the
--   second Data.Map is applicable to values.
type NameResolutionMaps = (NameResolutionMap, NameResolutionMap)

-- | Creates the NameResolution Data.Map instances.
createNameResolutionMaps :: String -> Relation -> NameResolutionMaps

-- | Resolves a simple type name to the corresponding qualified Element.
--   The simple type name will be qualified with "?" and wrapped in an
--   MetaModel.UnknownType Element if the mapping is not known by the
--   provided NameResolutionMaps.
resolveType :: String -> NameResolutionMaps -> Element

-- | Resolves a simple value name to the corresponding qualified Element.
--   The simple value name will be qualified with "?" if the mapping is not
--   known by the provided NameResolutionMaps.
resolveValue :: String -> NameResolutionMaps -> Element


-- | MetaHS data model layer utility functions
module MetaHS.DataModel.Utils


-- | MetaHS extractor for module level uses relations
module MetaHS.DataModel.Extractor.Module.Uses

-- | Create MetaModel.Contains relations for top-level declarations of a
--   module.
uses :: Module SrcSpanInfo -> Relation -> Relation


-- | MetaHS extractor for module level source relations
module MetaHS.DataModel.Extractor.Module.Source

-- | Creates Location relations for all supported top-level declarations in
--   the provided Module.
source :: Module SrcSpanInfo -> Relation


-- | MetaHS extractor for module level contains relations
module MetaHS.DataModel.Extractor.Module.Contains

-- | Create MetaModel.Relations for top-level declarations of a module.
contains :: Module SrcSpanInfo -> Relation


-- | MetaHS EDSL Graph types
module MetaHS.EDSL.Graph.Types

-- | Type synonym for generated LCOM graph.
type GraphType = Gr Element Text

-- | Type synonym for generated GraphvizParams.
type ParamsType = GraphvizParams Node Element Text () Element

-- | Determines whether the graph should be directed or undirected.
data Directed
Directed :: Directed
Undirected :: Directed


-- | Utilities for handling graphs
module MetaHS.EDSL.Graph.Utils

-- | Generates an image from a graph and writes this to a file in the
--   specified format using the specified Graphviz layouter.
graphToImage :: GraphvizCommand -> GraphvizOutput -> FilePath -> GraphType -> ParamsType -> IO FilePath


-- | MetaHS EDSL MetaModel part
module MetaHS.EDSL.MetaModel

-- | Generates a meta-model.
generateMetaModel :: String -> String -> String -> IO MetaModel

-- | Write a meta-model to a file.
writeMetaModel :: MetaModel -> String -> IO ()

-- | Read a meta-model from a file.
readMetaModel :: String -> IO MetaModel

-- | Write a meta-model to a file.
writeMetaModelPretty :: MetaModel -> String -> IO ()

-- | Returns a pretty printed representation of the meta-model.
pretty :: MetaModel -> Doc

-- | Returns the number of relation items in the meta-model.
numberOfItems :: MetaModel -> Int

-- | Returns a list of Programs contained in the metamodel.
getPrograms :: MetaModel -> [Element]

-- | Returns a list of Modules contained in the metamodel.
getModules :: MetaModel -> [Element]

-- | Returns a list of Elements contained by the specified Program.
programContains :: MetaModel -> Element -> [Element]

-- | Returns a list of Elements contained by the specified Module.
moduleContains :: MetaModel -> Element -> [Element]

-- | Returns a list of Elements imported by the specified Module.
moduleImports :: MetaModel -> Element -> [Element]

-- | Returns a list of Elements contained by the specified Element.
elementContains :: MetaModel -> Element -> [Element]

-- | Returns a list of Elements imported by the specified Element.
elementImports :: MetaModel -> Element -> [Element]

-- | Returns a the source location for the specified Element.
elementSource :: MetaModel -> Element -> Maybe Element

-- | Returns a list of Elements used by the specified Element.
elementUses :: MetaModel -> Element -> [Element]

-- | Returns the relation corresponding to the supplied key or an empty
--   Set.
getRelation :: String -> MetaModel -> Relation

-- | Returns a MetaModel that is appended with a new or replaced Relation
--   set.
setRelation :: String -> Relation -> MetaModel -> MetaModel

-- | Returns the domain for a specified relation in the metamodel.
domain :: String -> MetaModel -> Set Element

-- | Returns the range for a specified relation in the metamodel.
range :: String -> MetaModel -> Set Element

-- | convenience type that represents the metamodel aggregation relation
type RelationKey = String


-- | MetaHS EDSL Utils part
module MetaHS.EDSL.Utils

-- | Splits an identifier in the qualifier and name parts.
split :: String -> (String, String)

-- | Determines whether a given qualified name is local to the given
--   qualifier.
isLocal :: String -> String -> Bool

-- | Converts a Location Element to a query String suitable for URLs. An
--   empty String is returned if the Element is not a Location Element.
locationToQuery :: Element -> String


-- | Generates a Uses graph for a module
module MetaHS.EDSL.Graph.UsesGraph

-- | Generates the internal uses graph for the specified module and returns
--   the associated default GraphvizParams.
internalUses :: MetaModel -> Element -> Directed -> String -> (GraphType, ParamsType)

-- | Generates the internal uses graph for the specified module.
internalUsesGraph :: MetaModel -> Element -> Directed -> GraphType

-- | Generates the default GraphvizParams for the internal uses graph for
--   the specified module.
internalUsesParams :: MetaModel -> Element -> Directed -> String -> ParamsType


-- | MetaHS EDSL Graph part
module MetaHS.EDSL.Graph


-- | MetaHS EDSL
module MetaHS.EDSL


-- | Metamodel Element that is interesting (those that represents modules
--   being imported) is : Module. All other Elements that are part of the
--   _contains relations are ignored.
--   
--   CBO - Coupling between object classes The coupling between object
--   classes (CBO) metric represents the number of classes coupled to a
--   given class (efferent couplings, Ce). This coupling can occur through
--   method calls, field accesses, inheritance, arguments, return types,
--   and exceptions. ref. Chidamber and Kemerer (1994)
module MetaHS.Extensions.CBO

-- | MetaModel key used for the CBO relation.
keyCbo :: RelationKey

-- | CBO aggregator that adds the CBO metric relation to the supplied
--   meta-model.
cboAggregator :: MetaModel -> MetaModel


-- | Metamodel Elements that are interesting (those that are used to
--   determine nodes in MetaHS.EDSL.Graph.UsesGraph module ) are :
--   TypeSynonym, DataType, Function. All other Elements that are part of
--   the _contains relations are ignored.
--   
--   LCOM4 - Number of connected components in the graph that represents
--   each method as a node and the sharing of at least one attribute/method
--   as an edge. ref. Hitz and Montazeri (1995)
module MetaHS.Extensions.LCOM

-- | Calculates the LCOM metric value for a specified module name.
lcom :: MetaModel -> Element -> Int

-- | Generates the internalUsesGraph for the specified Module Element and
--   calculates the corresponding LCOM metric value.
lcomGraph :: MetaModel -> Element -> Directed -> String -> (Int, GraphType, ParamsType)

-- | MetaModel key used for the LCOM relation.
keyLcom :: RelationKey

-- | LCOM aggregator that adds the LCOM relation to the metamodel. key =
--   keyLcom value = (p,c) where p is a Module Element and c is an IntValue
--   Element that contains the LCOM value for the module.
lcomAggregator :: MetaModel -> MetaModel


-- | Metamodel Elements that are interesting (those that occupy distinct
--   line numbers) are : ModuleHead, ModuleImport, TypeSynonym, DataType,
--   Function, TypeSignature, TypeClass and Instance. All other Elements
--   that are part of the _contains relations are ignored.
--   
--   LOC - Sum of all non-empty, non-comment lines in a module.
module MetaHS.Extensions.LOC

-- | MetaModel key used for the LOC relation.
keyLoc :: RelationKey

-- | LOC aggregator that adds the LOC metric relation to the supplied
--   meta-model.
locAggregator :: MetaModel -> MetaModel


module MetaHS.Extensions.MacroLevelAggregation.Utils

-- | Extracts the metric values from the Relation associated with supplied
--   key
getMetricElements :: RelationKey -> MetaModel -> [Int]


-- | Calculates the metric population corresponding to supplied Relation
--   Key.
module MetaHS.Extensions.MacroLevelAggregation.Population

-- | Calculates the metric population corresponding to supplied Relation
--   Key.
population :: RelationKey -> MetaModel -> [Int]


-- | Calculates the median of the metric values corresponding to supplied
--   Relation Key.
module MetaHS.Extensions.MacroLevelAggregation.Median

-- | Calculate the median of the metric values associated with the supplied
--   metric Relation key
median :: RelationKey -> MetaModel -> Double


-- | Calculates the deviation to a supplied 'ideal value' in a range
--   between a lower and upper bound for the median of metric values
--   corresponding to supplied Relation Key. Result is a value bounded by
--   [0,1]. Empirically determined values are: LOC; low = -15, ideal = 69,
--   upper = 269 LCOM: low = 0, ideal = 1, upper = 11 CBO: low = 0, ideal =
--   6, upper = 16
module MetaHS.Extensions.MacroLevelAggregation.IdealValueDeviation

-- | Calculate the Ideal Value Deviation of the metric values associated
--   with the supplied metric Relation key.
idealValueDeviation :: RelationKey -> MetaModel -> Int -> Int -> Int -> Double


-- | Calculates the Gini-coefficient of the metric population corresponding
--   to supplied Relation Key. Result is a value bounded by [0,1].
module MetaHS.Extensions.MacroLevelAggregation.GiniCoefficient

-- | Calculate the Gini-coefficient of the metric values associated with
--   the supplied metric Relation key
giniCoefficient :: RelationKey -> MetaModel -> Double


-- | Calculates the distribution of the metric values corresponding to
--   supplied Relation Key.
module MetaHS.Extensions.MacroLevelAggregation.Distribution

-- | Calculates the distribution of the metric values corresponding to
--   supplied Relation Key.
distribution :: RelationKey -> MetaModel -> Set (Int, Int)


-- | Calculates the average of the metric values corresponding to supplied
--   Relation Key.
module MetaHS.Extensions.MacroLevelAggregation.Average

-- | Calculate the average of the metric values associated with the
--   supplied metric Relation key
average :: RelationKey -> MetaModel -> Double
